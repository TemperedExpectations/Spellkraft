#pragma kernel March
#include "/Includes/MarchTables.compute"

#define LevelVerts 1

static const int numThreads = 8;
static const int numLevels = 64;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
	float3 normal;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;
StructuredBuffer<float> weightLevels;

int numPointsPerAxis;
float yMin;
float yMax;

float inverseLerp(float a, float b, float value) {
	return ((value - a) / (b - a));
}

float3 interpolateVerts(float4 v1, float4 v2, float level) {
	float t = saturate((level - v1.w) / (v2.w - v1.w));

	return v1.xyz + t * (v2.xyz-v1.xyz);
}

float3 interpolateVerts(float4 v1, float4 v2, float level1, float level2) {
	if (level1 == level2) {
		return interpolateVerts(v1, v2, level1);
	}

	float3 f1 = interpolateVerts(v1, v2, level1);
	float3 f2 = interpolateVerts(v1, v2, level2);
	
    return lerp(f1, f2, .5);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float lerpWeight(float level) {
	int lowLevel = floor(level);
	if (level == lowLevel) return weightLevels[lowLevel];

	float t = level - lowLevel;
	return lerp(weightLevels[lowLevel], weightLevels[lowLevel + 1], t);
}

[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPointsPerAxis-1 || id.y >= numPointsPerAxis-1 || id.z >= numPointsPerAxis-1) {
        return;
    }

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

	float weightCorners[8] = {
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[0].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[1].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[2].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[3].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[4].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[5].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[6].y) * (numLevels - 1)),
		lerpWeight(inverseLerp(yMin, yMax, cubeCorners[7].y) * (numLevels - 1))
	};

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < weightCorners[0]) cubeIndex |= 1;
    if (cubeCorners[1].w < weightCorners[1]) cubeIndex |= 2;
    if (cubeCorners[2].w < weightCorners[2]) cubeIndex |= 4;
    if (cubeCorners[3].w < weightCorners[3]) cubeIndex |= 8;
    if (cubeCorners[4].w < weightCorners[4]) cubeIndex |= 16;
    if (cubeCorners[5].w < weightCorners[5]) cubeIndex |= 32;
    if (cubeCorners[6].w < weightCorners[6]) cubeIndex |= 64;
    if (cubeCorners[7].w < weightCorners[7]) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
		#if LevelVerts
			tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0], weightCorners[a0], weightCorners[b0]);
			tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1], weightCorners[a1], weightCorners[b1]);
			tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2], weightCorners[a2], weightCorners[b2]);
		#else
			tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0], weightCorners[a0]);
			tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1], weightCorners[a1]);
			tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2], weightCorners[a2]);
		#endif
		tri.normal = normalize(cross(tri.vertexC - tri.vertexA, tri.vertexB - tri.vertexA));
        triangles.Append(tri);
    }


}
